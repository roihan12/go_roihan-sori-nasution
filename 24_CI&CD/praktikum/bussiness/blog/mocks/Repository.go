// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	blog "echo-blog/bussiness/blog"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: blogDomain
func (_m *Repository) Create(blogDomain *blog.Domain) blog.Domain {
	ret := _m.Called(blogDomain)

	var r0 blog.Domain
	if rf, ok := ret.Get(0).(func(*blog.Domain) blog.Domain); ok {
		r0 = rf(blogDomain)
	} else {
		r0 = ret.Get(0).(blog.Domain)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: title
func (_m *Repository) GetAll(title string) []blog.Domain {
	ret := _m.Called(title)

	var r0 []blog.Domain
	if rf, ok := ret.Get(0).(func(string) []blog.Domain); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blog.Domain)
		}
	}

	return r0
}

// GetByCategoryID provides a mock function with given fields: id
func (_m *Repository) GetByCategoryID(id string) []blog.Domain {
	ret := _m.Called(id)

	var r0 []blog.Domain
	if rf, ok := ret.Get(0).(func(string) []blog.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blog.Domain)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id string) blog.Domain {
	ret := _m.Called(id)

	var r0 blog.Domain
	if rf, ok := ret.Get(0).(func(string) blog.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(blog.Domain)
	}

	return r0
}

// Update provides a mock function with given fields: id, blogDomain
func (_m *Repository) Update(id string, blogDomain *blog.Domain) blog.Domain {
	ret := _m.Called(id, blogDomain)

	var r0 blog.Domain
	if rf, ok := ret.Get(0).(func(string, *blog.Domain) blog.Domain); ok {
		r0 = rf(id, blogDomain)
	} else {
		r0 = ret.Get(0).(blog.Domain)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
